{
  "extraction_timestamp": "2025-09-11T17:20:50.254299",
  "total_transforms": 109,
  "transforms_by_type": {
    "spark_operation": 59,
    "pandas_operation": 48,
    "sql_operation": 2
  },
  "transforms_by_language": {
    "spark": 59,
    "python": 48,
    "sql": 2
  },
  "datasets": {},
  "jobs": {
    "spark_spark_pipeline": {
      "name": "spark_pipeline",
      "type": "spark_job",
      "file": "spark_pipeline.py"
    },
    "spark_spark_pipeline_simple": {
      "name": "spark_pipeline_simple",
      "type": "spark_job",
      "file": "spark_pipeline_simple.py"
    },
    "spark_test_spark_pipeline": {
      "name": "test_spark_pipeline",
      "type": "spark_job",
      "file": "test_spark_pipeline.py"
    },
    "python_data_transformer": {
      "name": "data_transformer",
      "type": "python_job",
      "file": "data_transformer.py"
    },
    "python_data_pipeline": {
      "name": "data_pipeline",
      "type": "python_job",
      "file": "data_pipeline.py"
    },
    "python_data_extractor": {
      "name": "data_extractor",
      "type": "python_job",
      "file": "data_extractor.py"
    },
    "python_data_generator": {
      "name": "data_generator",
      "type": "python_job",
      "file": "data_generator.py"
    },
    "python_database_manager": {
      "name": "database_manager",
      "type": "python_job",
      "file": "database_manager.py"
    }
  },
  "all_transforms": [
    {
      "id": "spark_spark_pipeline_filter_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "filter(\n            col(\"customer_id\")",
      "description": "Spark filter operation"
    },
    {
      "id": "spark_spark_pipeline_filter_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "filter(\n            col(\"account_id\")",
      "description": "Spark filter operation"
    },
    {
      "id": "spark_spark_pipeline_filter_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "filter(\n            col(\"transaction_id\")",
      "description": "Spark filter operation"
    },
    {
      "id": "spark_spark_pipeline_filter_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "filter(col(\"is_active\")",
      "description": "Spark filter operation"
    },
    {
      "id": "spark_spark_pipeline_select_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "select(generate_udf(col(\"customer_id\")",
      "description": "Spark select operation"
    },
    {
      "id": "spark_spark_pipeline_select_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "select(\"data.*\")",
      "description": "Spark select operation"
    },
    {
      "id": "spark_spark_pipeline_select_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "select(\n            \"customer_id\", \"first_name\", \"last_name\", \"email\", \"customer_tier\",\n            \"is_active\", \"credit_score\", \"annual_income\", \"total_accounts\",\n            \"active_accounts\", \"total_balance\", \"avg_balance\", \"total_transactions\",\n            \"total_transaction_amount\", \"avg_transaction_amount\",\n            \"first_transaction_date\", \"last_transaction_date\"\n        )",
      "description": "Spark select operation"
    },
    {
      "id": "spark_spark_pipeline_select_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "select(\n            \"account_id\", \"customer_id\", \"account_type\", \"account_status\",\n            \"opening_date\", \"balance\", \"credit_limit\", \"interest_rate\",\n            \"currency\", \"branch_code\", \"total_transactions\", \"total_transaction_amount\",\n            \"avg_transaction_amount\", \"first_transaction_date\", \n            col(\"last_txn_date\")",
      "description": "Spark select operation"
    },
    {
      "id": "spark_spark_pipeline_select_4",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "select(\n            when(col(\"credit_score\")",
      "description": "Spark select operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"customer_id\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"customer_id\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"account_id\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"customer_tier\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_4",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"credit_range\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_5",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"account_type\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_6",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"account_status\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_7",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"account_type\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_8",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"transaction_type\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_9",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\"category\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_groupBy_10",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "groupBy(\n            year(\"transaction_date\")",
      "description": "Spark groupBy operation"
    },
    {
      "id": "spark_spark_pipeline_agg_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg(\n            count(\"account_id\")",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_agg_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg(\n            count(\"transaction_id\")",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_agg_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg(\n            count(\"transaction_id\")",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_agg_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg(\n            avg(\"balance\")",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_agg_4",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg(\n            count(\"transaction_id\")",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_join_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(\n            customer_accounts, \"customer_id\", \"left\"\n        )",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(\n            customer_transactions, \"customer_id\", \"left\"\n        )",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(\n            account_transactions, \"account_id\", \"left\"\n        )",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, f\"{name}.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_4",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"customers\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_5",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"accounts\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_6",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"transactions\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_7",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"customer_summary\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_join_8",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"account_summary\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"count\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"count\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"count\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"count\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_4",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"avg_balance\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_5",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"count\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_6",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"count\", ascending=False)",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_orderBy_7",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "orderBy(\"year\", \"month\")",
      "description": "Spark orderBy operation"
    },
    {
      "id": "spark_spark_pipeline_coalesce_0",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "coalesce(1)",
      "description": "Spark coalesce operation"
    },
    {
      "id": "spark_spark_pipeline_coalesce_1",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "coalesce(1)",
      "description": "Spark coalesce operation"
    },
    {
      "id": "spark_spark_pipeline_coalesce_2",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "coalesce(1)",
      "description": "Spark coalesce operation"
    },
    {
      "id": "spark_spark_pipeline_coalesce_3",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "coalesce(1)",
      "description": "Spark coalesce operation"
    },
    {
      "id": "spark_spark_pipeline_coalesce_4",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "coalesce(1)",
      "description": "Spark coalesce operation"
    },
    {
      "id": "spark_spark_pipeline_coalesce_5",
      "file": "spark_pipeline.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "coalesce(1)",
      "description": "Spark coalesce operation"
    },
    {
      "id": "spark_spark_pipeline_simple_agg_0",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg({\n            'account_id': 'count',\n            'account_status': lambda x: (x == 'Active')",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_simple_agg_1",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg({\n            'transaction_id': 'count',\n            'amount': ['sum', 'mean'],\n            'transaction_date': ['min', 'max']\n        })",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_simple_agg_2",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg({\n            'transaction_id': 'count',\n            'amount': ['sum', 'mean'],\n            'transaction_date': ['min', 'max']\n        })",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_simple_agg_3",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg(['mean', 'sum'])",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_simple_agg_4",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "agg({\n            'transaction_id': 'count',\n            'amount': 'sum'\n        })",
      "description": "Spark agg operation"
    },
    {
      "id": "spark_spark_pipeline_simple_join_0",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, f\"{name}.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_simple_join_1",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"customers.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_simple_join_2",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"accounts.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_simple_join_3",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"transactions.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_simple_join_4",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"customer_summary.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "spark_spark_pipeline_simple_join_5",
      "file": "spark_pipeline_simple.py",
      "language": "spark",
      "layer": "processing",
      "table": "spark_dataframe",
      "column": "multiple",
      "transform_type": "spark_operation",
      "transform": "join(self.output_dir, \"account_summary.csv\")",
      "description": "Spark join operation"
    },
    {
      "id": "python_data_transformer_string_operation_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(lower)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(strip)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(replace)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_3",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(title)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_4",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(strip)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_5",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(title)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_6",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(strip)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_7",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(strip)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_8",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(title)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_9",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(strip)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_10",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(upper)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_string_operation_11",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "string_operation(strip)",
      "description": "Python pandas string_operation operation"
    },
    {
      "id": "python_data_transformer_fillna_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna('Unknown'))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(df['credit_score'].median())",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(df['annual_income'].median())",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_3",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_4",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_5",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_6",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_7",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_8",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_9",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(pd.NaT))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_10",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_fillna_11",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "fillna(.fillna(0))",
      "description": "Python pandas fillna operation"
    },
    {
      "id": "python_data_transformer_dropna_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "dropna(.dropna(subset=['email', 'first_name', 'last_name']))",
      "description": "Python pandas dropna operation"
    },
    {
      "id": "python_data_transformer_dropna_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "dropna(.dropna(subset=['account_id', 'customer_id', 'account_type']))",
      "description": "Python pandas dropna operation"
    },
    {
      "id": "python_data_transformer_dropna_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "dropna(.dropna(subset=['transaction_id', 'account_id', 'amount']))",
      "description": "Python pandas dropna operation"
    },
    {
      "id": "python_data_transformer_clip_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "clip(.clip(lower=300, upper=850))",
      "description": "Python pandas clip operation"
    },
    {
      "id": "python_data_transformer_clip_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "clip(.clip(lower=0))",
      "description": "Python pandas clip operation"
    },
    {
      "id": "python_data_transformer_groupby_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "groupby(.groupby('customer_id'))",
      "description": "Python pandas groupby operation"
    },
    {
      "id": "python_data_transformer_groupby_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "groupby(.groupby('customer_id'))",
      "description": "Python pandas groupby operation"
    },
    {
      "id": "python_data_transformer_groupby_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "groupby(.groupby('account_id'))",
      "description": "Python pandas groupby operation"
    },
    {
      "id": "python_data_transformer_agg_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "agg(.agg({\n            'account_id': 'count',\n            'balance': 'sum',\n            'last_transaction_date': 'max'\n        }))",
      "description": "Python pandas agg operation"
    },
    {
      "id": "python_data_transformer_agg_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "agg(.agg({\n            'amount': 'count',\n            'transaction_date': 'max'\n        }))",
      "description": "Python pandas agg operation"
    },
    {
      "id": "python_data_transformer_agg_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "agg(.agg({\n            'amount': ['count', 'mean'],\n            'transaction_date': 'max'\n        }))",
      "description": "Python pandas agg operation"
    },
    {
      "id": "python_data_transformer_merge_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "merge(.merge(\n            account_summary, left_on='customer_id', right_index=True, how='left'\n        ))",
      "description": "Python pandas merge operation"
    },
    {
      "id": "python_data_transformer_merge_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "merge(.merge(\n            transaction_summary[['avg_monthly_transactions', 'last_transaction_date']], \n            left_on='customer_id', right_index=True, how='left'\n        ))",
      "description": "Python pandas merge operation"
    },
    {
      "id": "python_data_transformer_merge_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "merge(.merge(\n            transaction_summary, on='account_id', how='left'\n        ))",
      "description": "Python pandas merge operation"
    },
    {
      "id": "python_data_transformer_apply_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(lambda x: x if len(x))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_apply_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(\n            lambda x: x if x in valid_types else 'Other'\n        ))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_apply_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(\n            lambda x: x if x in valid_statuses else 'Unknown'\n        ))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_apply_3",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(\n            lambda x: x if x in valid_currencies else 'USD'\n        ))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_apply_4",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(\n            lambda x: x if x in valid_types else 'Other'\n        ))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_apply_5",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(\n            lambda x: x if x in valid_categories else 'Other'\n        ))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_apply_6",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "apply(.apply(\n            lambda x: x if x in valid_statuses else 'Unknown'\n        ))",
      "description": "Python pandas apply operation"
    },
    {
      "id": "python_data_transformer_drop_duplicates_0",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "drop_duplicates(.drop_duplicates(subset=['customer_id', 'email']))",
      "description": "Python pandas drop_duplicates operation"
    },
    {
      "id": "python_data_transformer_drop_duplicates_1",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "drop_duplicates(.drop_duplicates(subset=['account_id']))",
      "description": "Python pandas drop_duplicates operation"
    },
    {
      "id": "python_data_transformer_drop_duplicates_2",
      "file": "data_transformer.py",
      "language": "python",
      "layer": "processing",
      "table": "dataframe",
      "column": "multiple",
      "transform_type": "pandas_operation",
      "transform": "drop_duplicates(.drop_duplicates(subset=['transaction_id']))",
      "description": "Python pandas drop_duplicates operation"
    },
    {
      "id": "sql_test_data_quality_select_0",
      "file": "target/compiled/data_pipeline/tests/test_data_quality.sql",
      "language": "sql",
      "layer": "query",
      "table": "sql_table",
      "column": "multiple",
      "transform_type": "sql_operation",
      "transform": "select: customer_id,\n    email,\n    credit_score,\n    annual_income",
      "description": "SQL select operation"
    },
    {
      "id": "sql_test_data_quality_where_0",
      "file": "target/compiled/data_pipeline/tests/test_data_quality.sql",
      "language": "sql",
      "layer": "query",
      "table": "sql_table",
      "column": "multiple",
      "transform_type": "sql_operation",
      "transform": "where: -- Email format validation\n    email not regexp '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$'\n    -- Credit score range validation\n    or credit_score < 300 \n    or credit_score > 850\n    -- Annual income range validation\n    or annual_income < 25000 \n    or annual_income > 200000\n    -- Required fields validation\n    or customer_id is null\n    or email is null\n    or first_name is null\n    or last_name is null",
      "description": "SQL where operation"
    }
  ]
}